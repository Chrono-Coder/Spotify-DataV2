
import styles from '../../styles/Home.module.css'
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { useState, useEffect } from 'react'
import axios from 'axios'

export default function Login() {
    const CLIENT_ID = "98f0b93b224645efb38fe8dcfbdf712d"
    //const REDIRECT_URI = "https://spotify-data-chrono-coder.vercel.app/"
    const REDIRECT_URI = "http://176.205.103.177:3000/"//help/login/"/*http://localhost:3000/"*/
    const AUTH_ENDPOINT = "https://accounts.spotify.com/authorize"
    const RESPONSE_TYPE = "token";
    const SPACE_DELIMITER = "%20"
    const SCOPES = ["user-library-read", "user-read-currently-playing", "user-top-read", "user-follow-read", "user-read-email", "user-read-recently-played"]
    const SCOPES_URL_PARAM = SCOPES.join(SPACE_DELIMITER)

    const [token, setToken] = useState("")

    useEffect(() => {
        const hash = window.location.hash
        let token = window.localStorage.getItem("token")

        if (!token && hash) {
            token = hash.substring(1).split("&").find(el => el.startsWith("access_token")).split("=")[1]
            window.location.hash = ""
            window.localStorage.setItem("token", token)

        }
        setToken(token)
    }, [])

    return (
        <div className={styles.container}>
            <Head>
                <title>Spotify Data Login</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <nav className={styles.navbar}>
                <div className={styles.image}>
                    <Image priority src="/images/black.png" width={"200%"} height={"60%"} />

                </div>
                <h1>Data Collection</h1>
            </nav>
            <div className={styles.boxLogin}>
                <a className={styles.login} href={`${AUTH_ENDPOINT}?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&scope=${SCOPES_URL_PARAM}&response_type=${RESPONSE_TYPE}&show_dialog=true`}>Login</a>
            </div>
        </div>

    )

}


export function logoutHandler() {
    window.localStorage.removeItem("token")
    setToken("")
    window.location = REDIRECT_URI;
}

export async function getAPIData() {
    let token = window.localStorage.getItem("token")
    console.log(token)
    const  playlistsData  = await axios.get("https://api.spotify.com/v1/me/playlists", {
        headers: {
            Authorization: `Bearer ${token}`
        },
        params: {
            limit: 50
        }

    })
    const test = await playlistsData.json()
    // console.log(data)
    // setPlaylists(data.items)


    // const  topArtistsData = await axios.get("https://api.spotify.com/v1/me/top/artists", {
    //     headers: {
    //         Authorization: `Bearer ${token}`
    //     },
    //     params: {
    //         limit: 50,
    //         time_range: "short_term"
    //     }

    // })
    // // console.log(data)
    // // setTop(data.items)


    // const  topTracksData  = await axios.get("https://api.spotify.com/v1/me/top/tracks", {
    //     headers: {
    //         Authorization: `Bearer ${token}`
    //     },
    //     params: {
    //         limit: 50
    //     }

    // })
    // // console.log(data)
    // // setTopTracks(data.items)


    // const followingData  = await axios.get("https://api.spotify.com/v1/me/following", {
    //     headers: {
    //         Authorization: `Bearer ${token}`
    //     },
    //     params: {
    //         type: "artist",
    //         limit: 50
    //     }

    // })
    
    // // console.log(data)
    // // setFollowning(data.artists.items)


    // const currentTrackData = await axios.get("https://api.spotify.com/v1/me/player/currently-playing", {
    //     headers: {
    //         Authorization: `Bearer ${token}`
    //     }

    // })
    return  test.data
        // topArtistsData,
        // followingData,
       
        // libraryData,
        // topTracksData,
        // currentTrackData

    
}